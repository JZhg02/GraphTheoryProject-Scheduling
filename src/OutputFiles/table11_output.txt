This is table11

* Creating the scheduling graph:
There are 10 vertices.
And 16 edges.
0 -> 1 = 0
1 -> 2 = 1
1 -> 4 = 1
1 -> 5 = 1
2 -> 3 = 1
2 -> 8 = 1
3 -> 7 = 4
4 -> 2 = 2
4 -> 6 = 2
4 -> 8 = 2
5 -> 4 = 5
5 -> 6 = 5
5 -> 7 = 5
6 -> 8 = 6
7 -> 8 = 3
8 -> 9 = 0

Adjacent Matrix:
     0  1  2  3  4  5  6  7  8  9
  0  *  0  *  *  *  *  *  *  *  *
  1  *  *  1  *  1  1  *  *  *  *
  2  *  *  *  1  *  *  *  *  1  *
  3  *  *  *  *  *  *  *  4  *  *
  4  *  *  2  *  *  *  2  *  2  *
  5  *  *  *  *  5  *  5  5  *  *
  6  *  *  *  *  *  *  *  *  6  *
  7  *  *  *  *  *  *  *  *  3  *
  8  *  *  *  *  *  *  *  *  *  0
  9  *  *  *  *  *  *  *  *  *  *

Checking if there are cycles and negative edges...

[[1], [2, 4, 5], [3, 8], [7], [2, 6, 8], [4, 6, 7], [8], [8], [9], []]
Exit points: [9]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5, 6, 7, 8]
Exit points: [8]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5, 6, 7]
Exit points: [6, 7]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5]
Exit points: [3]
Eliminating exit points
Remaining vertices: [0, 1, 2, 4, 5]
Exit points: [2]
Eliminating exit points
Remaining vertices: [0, 1, 4, 5]
Exit points: [4]
Eliminating exit points
Remaining vertices: [0, 1, 5]
Exit points: [5]
Eliminating exit points
Remaining vertices: [0, 1]
Exit points: [1]
Eliminating exit points
Remaining vertices: [0]
Exit points: [0]
Eliminating exit points
Remaining vertices: []
Exit points: None
Eliminating exit points
Remaining vertices: None
-> There is no cycle
The graph has no negative edges. 

Computing ranks and dates...

                  Ranks                      0                      1                      2                      3                      4                      4                      5                      6                      7                      8
       Vertex(Duration)                   0(0)                   1(1)                   5(5)                   4(2)                   2(1)                   6(6)                   3(4)                   7(3)                   8(0)                   9(0)
           Predecessors                     []                    [0]                    [1]                 [1, 5]                 [1, 4]                 [4, 5]                    [2]                 [3, 5]           [2, 4, 6, 7]                    [8]
 Dates per Predecessors                  [0_0]                  [0_0]                  [1_1]             [1_1, 6_5]             [1_1, 8_4]             [8_4, 6_5]                  [9_2]            [13_3, 6_5] [9_2, 8_4, 14_6, 16_7]                 [16_8]
          Earliest Date                    0_0                    0_0                    1_1                    6_5                    8_4                    8_4                    9_2                   13_3                   16_7                   16_8
             Successors                    [1]              [2, 4, 5]              [4, 6, 7]              [2, 6, 8]                 [3, 8]                    [8]                    [7]                    [8]                    [9]                     []
   Dates per Successors                  [0_1]        [7_2, 5_4, 0_5]        [1_4, 5_6, 8_7]       [6_2, 8_6, 14_8]            [8_3, 15_8]                 [10_8]                  [9_7]                 [13_8]                 [16_9]                 [16_9]
            Latest Date                    0_1                    0_5                    1_4                    6_2                    8_3                   10_8                    9_7                   13_8                   16_9                   16_9
            Total Float                      0                      0                      0                      0                      0                      2                      0                      0                      0                      0

Critical path(s) : 
0 -> 1 -> 5 -> 4 -> 2 -> 3 -> 7 -> 8 -> 9

What do you want to do next ? 
Do you want to work on another file ? Enter 'yes' or 'no' : Enter file number please (1 to 12) : Chosen file : 12
This is table12

* Creating the scheduling graph:
There are 14 vertices.
And 23 edges.
0 -> 1 = 0
0 -> 2 = 0
1 -> 3 = 10
1 -> 4 = 10
1 -> 12 = 10
2 -> 3 = 10
2 -> 4 = 10
3 -> 9 = 9
4 -> 5 = 5
4 -> 7 = 5
4 -> 9 = 5
5 -> 6 = 4
5 -> 8 = 4
6 -> 11 = 2
6 -> 12 = 2
7 -> 8 = 2
8 -> 11 = 4
9 -> 8 = 8
9 -> 10 = 8
10 -> 3 = 12
10 -> 11 = 12
11 -> 13 = 2
12 -> 13 = 20

Adjacent Matrix:
     0  1  2  3  4  5  6  7  8  9 10 11 12 13
  0  *  0  0  *  *  *  *  *  *  *  *  *  *  *
  1  *  *  * 10 10  *  *  *  *  *  *  * 10  *
  2  *  *  * 10 10  *  *  *  *  *  *  *  *  *
  3  *  *  *  *  *  *  *  *  *  9  *  *  *  *
  4  *  *  *  *  *  5  *  5  *  5  *  *  *  *
  5  *  *  *  *  *  *  4  *  4  *  *  *  *  *
  6  *  *  *  *  *  *  *  *  *  *  *  2  2  *
  7  *  *  *  *  *  *  *  *  2  *  *  *  *  *
  8  *  *  *  *  *  *  *  *  *  *  *  4  *  *
  9  *  *  *  *  *  *  *  *  8  *  8  *  *  *
 10  *  *  * 12  *  *  *  *  *  *  * 12  *  *
 11  *  *  *  *  *  *  *  *  *  *  *  *  *  2
 12  *  *  *  *  *  *  *  *  *  *  *  *  * 20
 13  *  *  *  *  *  *  *  *  *  *  *  *  *  *

Checking if there are cycles and negative edges...

[[1, 2], [3, 4, 12], [3, 4], [9], [5, 7, 9], [6, 8], [11, 12], [8], [11], [8, 10], [3, 11], [13], [13], []]
Exit points: [13]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
Exit points: [11, 12]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Exit points: [6, 8]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5, 7, 9, 10]
Exit points: [5, 7]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 9, 10]
Exit points: []
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 9, 10]
-> There is a cycle
This is a cyclic graph, so we won't proceed further. 

What do you want to do next ? 
Do you want to work on another file ? Enter 'yes' or 'no' : Exiting...
