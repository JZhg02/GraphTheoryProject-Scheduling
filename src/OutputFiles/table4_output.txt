This is table4

* Creating the scheduling graph:
There are 13 vertices.
And 16 edges.
0 -> 1 = 0
0 -> 2 = 0
1 -> 4 = 3
2 -> 3 = 2
3 -> 10 = 3
4 -> 5 = 5
4 -> 7 = 5
4 -> 9 = 5
5 -> 6 = 4
5 -> 8 = 4
6 -> 11 = 2
7 -> 8 = 2
8 -> 11 = 4
9 -> 10 = 5
10 -> 12 = 1
11 -> 12 = 2

Adjacent Matrix:
     0  1  2  3  4  5  6  7  8  9 10 11 12
  0  *  0  0  *  *  *  *  *  *  *  *  *  *
  1  *  *  *  *  3  *  *  *  *  *  *  *  *
  2  *  *  *  2  *  *  *  *  *  *  *  *  *
  3  *  *  *  *  *  *  *  *  *  *  3  *  *
  4  *  *  *  *  *  5  *  5  *  5  *  *  *
  5  *  *  *  *  *  *  4  *  4  *  *  *  *
  6  *  *  *  *  *  *  *  *  *  *  *  2  *
  7  *  *  *  *  *  *  *  *  2  *  *  *  *
  8  *  *  *  *  *  *  *  *  *  *  *  4  *
  9  *  *  *  *  *  *  *  *  *  *  5  *  *
 10  *  *  *  *  *  *  *  *  *  *  *  *  1
 11  *  *  *  *  *  *  *  *  *  *  *  *  2
 12  *  *  *  *  *  *  *  *  *  *  *  *  *

Checking if there are cycles and negative edges...

[[1, 2], [4], [3], [10], [5, 7, 9], [6, 8], [11], [8], [11], [10], [12], [12], []]
Exit points: [12]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
Exit points: [10, 11]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
Exit points: [3, 6, 8, 9]
Eliminating exit points
Remaining vertices: [0, 1, 2, 4, 5, 7]
Exit points: [2, 5, 7]
Eliminating exit points
Remaining vertices: [0, 1, 4]
Exit points: [4]
Eliminating exit points
Remaining vertices: [0, 1]
Exit points: [1]
Eliminating exit points
Remaining vertices: [0]
Exit points: [0]
Eliminating exit points
Remaining vertices: []
Exit points: None
Eliminating exit points
Remaining vertices: None
-> There is no cycle
The graph has no negative edges. 

Computing ranks and dates...

                  Ranks                      0                      1                      1                      2                      2                      3                      3                      3                      4                      4                      4                      5                      6
       Vertex(Duration)                   0(0)                   1(3)                   2(2)                   3(3)                   4(5)                   5(4)                   7(2)                   9(5)                   6(2)                   8(4)                  10(1)                  11(2)                  12(0)
           Predecessors                     []                    [0]                    [0]                    [2]                    [1]                    [4]                    [4]                    [4]                    [5]                 [5, 7]                 [3, 9]                 [6, 8]               [10, 11]
 Dates per Predecessors                  [0_0]                  [0_0]                  [0_0]                  [2_2]                  [3_1]                  [8_4]                  [8_4]                  [8_4]                 [12_5]           [12_5, 10_7]            [5_3, 13_9]           [14_6, 16_8]         [14_10, 18_11]
          Earliest Date                    0_0                    0_0                    0_0                    2_2                    3_1                    8_4                    8_4                    8_4                   12_5                   12_5                   13_9                   16_8                  18_11
             Successors                 [1, 2]                    [4]                    [3]                   [10]              [5, 7, 9]                 [6, 8]                    [8]                   [10]                   [11]                   [11]                   [12]                   [12]                     []
   Dates per Successors            [0_1, 12_2]                  [0_4]                 [12_3]                [14_10]        [3_5, 5_7, 7_9]            [10_6, 8_8]                 [10_8]                [12_10]                [14_11]                [12_11]                [17_12]                [16_12]                [18_12]
            Latest Date                    0_1                    0_4                   12_3                  14_10                    3_5                    8_8                   10_8                  12_10                  14_11                  12_11                  17_12                  16_12                  18_12
            Total Float                      0                      0                     12                     12                      0                      0                      2                      4                      2                      0                      4                      0                      0

Critical path(s) : 
0 -> 1 -> 4 -> 5 -> 8 -> 11 -> 12

What do you want to do next ? 
Do you want to work on another file ? Enter 'yes' or 'no' : Enter file number please (1 to 12) : Chosen file : 5
This is table5

* Creating the scheduling graph:
There are 15 vertices.
And 18 edges.
0 -> 1 = 0
0 -> 2 = 0
1 -> 3 = 2
2 -> 4 = 5
3 -> 4 = 4
3 -> 12 = 4
4 -> 5 = 2
4 -> 11 = 2
5 -> 6 = 5
6 -> 7 = 5
6 -> 13 = 5
7 -> 8 = 9
8 -> 9 = 2
9 -> 14 = 5
10 -> 14 = 1
11 -> 10 = 1
12 -> 13 = 1
13 -> 14 = 9

Adjacent Matrix:
     0  1  2  3  4  5  6  7  8  9 10 11 12 13 14
  0  *  0  0  *  *  *  *  *  *  *  *  *  *  *  *
  1  *  *  *  2  *  *  *  *  *  *  *  *  *  *  *
  2  *  *  *  *  5  *  *  *  *  *  *  *  *  *  *
  3  *  *  *  *  4  *  *  *  *  *  *  *  4  *  *
  4  *  *  *  *  *  2  *  *  *  *  *  2  *  *  *
  5  *  *  *  *  *  *  5  *  *  *  *  *  *  *  *
  6  *  *  *  *  *  *  *  5  *  *  *  *  *  5  *
  7  *  *  *  *  *  *  *  *  9  *  *  *  *  *  *
  8  *  *  *  *  *  *  *  *  *  2  *  *  *  *  *
  9  *  *  *  *  *  *  *  *  *  *  *  *  *  *  5
 10  *  *  *  *  *  *  *  *  *  *  *  *  *  *  1
 11  *  *  *  *  *  *  *  *  *  *  1  *  *  *  *
 12  *  *  *  *  *  *  *  *  *  *  *  *  *  1  *
 13  *  *  *  *  *  *  *  *  *  *  *  *  *  *  9
 14  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *

Checking if there are cycles and negative edges...

[[1, 2], [3], [4], [4, 12], [5, 11], [6], [7, 13], [8], [9], [14], [14], [10], [13], [14], []]
Exit points: [14]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
Exit points: [9, 10, 13]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12]
Exit points: [8, 11, 12]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5, 6, 7]
Exit points: [7]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5, 6]
Exit points: [6]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5]
Exit points: [5]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4]
Exit points: [4]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3]
Exit points: [2, 3]
Eliminating exit points
Remaining vertices: [0, 1]
Exit points: [1]
Eliminating exit points
Remaining vertices: [0]
Exit points: [0]
Eliminating exit points
Remaining vertices: []
Exit points: None
Eliminating exit points
Remaining vertices: None
-> There is no cycle
The graph has no negative edges. 

Computing ranks and dates...

                  Ranks                      0                      1                      1                      2                      3                      3                      4                      4                      5                      5                      6                      6                      7                      8                      9
       Vertex(Duration)                   0(0)                   1(2)                   2(5)                   3(4)                   4(2)                  12(1)                   5(5)                  11(1)                   6(5)                  10(1)                   7(9)                  13(9)                   8(2)                   9(5)                  14(0)
           Predecessors                     []                    [0]                    [0]                    [1]                 [2, 3]                    [3]                    [4]                    [4]                    [5]                   [11]                    [6]                [6, 12]                    [7]                    [8]            [9, 10, 13]
 Dates per Predecessors                  [0_0]                  [0_0]                  [0_0]                  [2_1]             [5_2, 6_3]                  [6_3]                  [8_4]                  [8_4]                 [13_5]                 [9_11]                 [18_6]           [18_6, 7_12]                 [27_7]                 [29_8]   [34_9, 10_10, 27_13]
          Earliest Date                    0_0                    0_0                    0_0                    2_1                    6_3                    6_3                    8_4                    8_4                   13_5                   9_11                   18_6                   18_6                   27_7                   29_8                   34_9
             Successors                 [1, 2]                    [3]                    [4]                [4, 12]                [5, 11]                   [13]                    [6]                   [10]                [7, 13]                   [14]                    [8]                   [14]                    [9]                   [14]                     []
   Dates per Successors             [0_1, 1_2]                  [0_3]                  [1_4]           [2_4, 20_12]           [6_5, 30_11]                [24_13]                  [8_6]                [32_10]          [13_7, 20_13]                [33_14]                 [18_8]                [25_14]                 [27_9]                [29_14]                [34_14]
            Latest Date                    0_1                    0_3                    1_4                    2_4                    6_5                  24_13                    8_6                  32_10                   13_7                  33_14                   18_8                  25_14                   27_9                  29_14                  34_14
            Total Float                      0                      0                      1                      0                      0                     18                      0                     24                      0                     24                      0                      7                      0                      0                      0

Critical path(s) : 
0 -> 1 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 9 -> 14

What do you want to do next ? 
Do you want to work on another file ? Enter 'yes' or 'no' : Enter file number please (1 to 12) : Chosen file : 6
This is table6

* Creating the scheduling graph:
There are 14 vertices.
And 23 edges.
0 -> 1 = 0
0 -> 2 = 0
1 -> 3 = 10
1 -> 4 = 10
1 -> 12 = 10
2 -> 3 = 10
2 -> 4 = 10
3 -> 9 = 9
3 -> 10 = 9
4 -> 5 = 5
4 -> 7 = 5
4 -> 9 = 5
5 -> 6 = 4
5 -> 8 = 4
6 -> 11 = 2
6 -> 12 = 2
7 -> 8 = 2
8 -> 11 = 4
9 -> 8 = 8
9 -> 10 = 8
10 -> 11 = 12
11 -> 13 = 2
12 -> 13 = 20

Adjacent Matrix:
     0  1  2  3  4  5  6  7  8  9 10 11 12 13
  0  *  0  0  *  *  *  *  *  *  *  *  *  *  *
  1  *  *  * 10 10  *  *  *  *  *  *  * 10  *
  2  *  *  * 10 10  *  *  *  *  *  *  *  *  *
  3  *  *  *  *  *  *  *  *  *  9  9  *  *  *
  4  *  *  *  *  *  5  *  5  *  5  *  *  *  *
  5  *  *  *  *  *  *  4  *  4  *  *  *  *  *
  6  *  *  *  *  *  *  *  *  *  *  *  2  2  *
  7  *  *  *  *  *  *  *  *  2  *  *  *  *  *
  8  *  *  *  *  *  *  *  *  *  *  *  4  *  *
  9  *  *  *  *  *  *  *  *  8  *  8  *  *  *
 10  *  *  *  *  *  *  *  *  *  *  * 12  *  *
 11  *  *  *  *  *  *  *  *  *  *  *  *  *  2
 12  *  *  *  *  *  *  *  *  *  *  *  *  * 20
 13  *  *  *  *  *  *  *  *  *  *  *  *  *  *

Checking if there are cycles and negative edges...

[[1, 2], [3, 4, 12], [3, 4], [9, 10], [5, 7, 9], [6, 8], [11, 12], [8], [11], [8, 10], [11], [13], [13], []]
Exit points: [13]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
Exit points: [11, 12]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Exit points: [6, 8, 10]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5, 7, 9]
Exit points: [5, 7, 9]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4]
Exit points: [3, 4]
Eliminating exit points
Remaining vertices: [0, 1, 2]
Exit points: [1, 2]
Eliminating exit points
Remaining vertices: [0]
Exit points: [0]
Eliminating exit points
Remaining vertices: []
Exit points: None
Eliminating exit points
Remaining vertices: None
-> There is no cycle
The graph has no negative edges. 

Computing ranks and dates...

                  Ranks                      0                      1                      1                      2                      2                      3                      3                      3                      4                      4                      4                      5                      5                      6
       Vertex(Duration)                   0(0)                  1(10)                  2(10)                   3(9)                   4(5)                   5(4)                   7(2)                   9(8)                   6(2)                   8(4)                 10(12)                  11(2)                 12(20)                  13(0)
           Predecessors                     []                    [0]                    [0]                 [1, 2]                 [1, 2]                    [4]                    [4]                 [3, 4]                    [5]              [5, 7, 9]                 [3, 9]             [6, 8, 10]                 [1, 6]               [11, 12]
 Dates per Predecessors                  [0_0]                  [0_0]                  [0_0]           [10_1, 10_2]           [10_1, 10_2]                 [15_4]                 [15_4]           [19_3, 15_4]                 [19_5]     [19_5, 17_7, 27_9]           [19_3, 27_9]    [21_6, 31_8, 39_10]           [10_1, 21_6]         [41_11, 41_12]
          Earliest Date                    0_0                    0_0                    0_0                   10_1                   10_1                   15_4                   15_4                   19_3                   19_5                   27_9                   27_9                  39_10                   21_6                  41_11
             Successors                 [1, 2]             [3, 4, 12]                 [3, 4]                [9, 10]              [5, 7, 9]                 [6, 8]                    [8]                [8, 10]               [11, 12]                   [11]                   [11]                   [13]                   [13]                     []
   Dates per Successors             [0_1, 0_2]      [0_3, 0_4, 11_12]             [0_3, 0_4]          [10_9, 18_10]     [10_5, 28_7, 14_9]           [15_6, 31_8]                 [33_8]          [27_8, 19_10]         [37_11, 19_12]                [35_11]                [27_11]                [39_13]                [21_13]                [41_13]
            Latest Date                    0_1                    0_3                    0_3                   10_9                   10_5                   15_6                   33_8                  19_10                  19_12                  35_11                  27_11                  39_13                  21_13                  41_13
            Total Float                      0                      0                      0                      0                      0                      0                     18                      0                      0                      8                      0                      0                      0                      0

Critical path(s) : 
0 -> 1 -> 3 -> 9 -> 10 -> 11 -> 13
0 -> 2 -> 3 -> 9 -> 10 -> 11 -> 13
0 -> 1 -> 4 -> 5 -> 6 -> 12 -> 13
0 -> 2 -> 4 -> 5 -> 6 -> 12 -> 13

What do you want to do next ? 
Do you want to work on another file ? Enter 'yes' or 'no' : Enter file number please (1 to 12) : Chosen file : 7
This is table7

* Creating the scheduling graph:
There are 12 vertices.
And 16 edges.
0 -> 4 = 0
0 -> 6 = 0
0 -> 7 = 0
1 -> 9 = 1
2 -> 11 = 2
3 -> 9 = 3
4 -> 1 = 4
4 -> 5 = 4
5 -> 8 = 5
6 -> 3 = 6
6 -> 10 = 6
7 -> 2 = 7
7 -> 8 = 7
8 -> 9 = 8
9 -> 11 = 9
10 -> 1 = 10

Adjacent Matrix:
     0  1  2  3  4  5  6  7  8  9 10 11
  0  *  *  *  *  0  *  0  0  *  *  *  *
  1  *  *  *  *  *  *  *  *  *  1  *  *
  2  *  *  *  *  *  *  *  *  *  *  *  2
  3  *  *  *  *  *  *  *  *  *  3  *  *
  4  *  4  *  *  *  4  *  *  *  *  *  *
  5  *  *  *  *  *  *  *  *  5  *  *  *
  6  *  *  *  6  *  *  *  *  *  *  6  *
  7  *  *  7  *  *  *  *  *  7  *  *  *
  8  *  *  *  *  *  *  *  *  *  8  *  *
  9  *  *  *  *  *  *  *  *  *  *  *  9
 10  * 10  *  *  *  *  *  *  *  *  *  *
 11  *  *  *  *  *  *  *  *  *  *  *  *

Checking if there are cycles and negative edges...

[[4, 6, 7], [9], [11], [9], [1, 5], [8], [3, 10], [2, 8], [9], [11], [1], []]
Exit points: [11]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Exit points: [2, 9]
Eliminating exit points
Remaining vertices: [0, 1, 3, 4, 5, 6, 7, 8, 10]
Exit points: [1, 3, 8]
Eliminating exit points
Remaining vertices: [0, 4, 5, 6, 7, 10]
Exit points: [5, 7, 10]
Eliminating exit points
Remaining vertices: [0, 4, 6]
Exit points: [4, 6]
Eliminating exit points
Remaining vertices: [0]
Exit points: [0]
Eliminating exit points
Remaining vertices: []
Exit points: None
Eliminating exit points
Remaining vertices: None
-> There is no cycle
The graph has no negative edges. 

Computing ranks and dates...

                  Ranks                      0                      1                      1                      1                      2                      2                      2                      2                      3                      3                      4                      5
       Vertex(Duration)                   0(0)                   4(4)                   6(6)                   7(7)                   2(2)                   3(3)                   5(5)                 10(10)                   1(1)                   8(8)                   9(9)                  11(0)
           Predecessors                     []                    [0]                    [0]                    [0]                    [7]                    [6]                    [4]                    [6]                [4, 10]                 [5, 7]              [1, 3, 8]                 [2, 9]
 Dates per Predecessors                  [0_0]                  [0_0]                  [0_0]                  [0_0]                  [7_7]                  [6_6]                  [4_4]                  [6_6]           [4_4, 16_10]             [9_5, 7_7]      [17_1, 9_3, 17_8]            [9_2, 26_9]
          Earliest Date                    0_0                    0_0                    0_0                    0_0                    7_7                    6_6                    4_4                    6_6                  16_10                    9_5                   17_1                   26_9
             Successors              [4, 6, 7]                 [1, 5]                [3, 10]                 [2, 8]                   [11]                    [9]                    [8]                    [1]                    [9]                    [9]                   [11]                     []
   Dates per Successors        [0_4, 0_6, 2_7]            [12_1, 0_5]            [8_3, 0_10]            [17_2, 2_8]                [24_11]                 [14_9]                  [4_8]                  [6_1]                 [16_9]                  [9_9]                [17_11]                [26_11]
            Latest Date                    0_4                    0_5                   0_10                    2_8                  24_11                   14_9                    4_8                    6_1                   16_9                    9_9                  17_11                  26_11
            Total Float                      0                      0                      0                      2                     17                      8                      0                      0                      0                      0                      0                      0

Critical path(s) : 
0 -> 6 -> 10 -> 1 -> 9 -> 11
0 -> 4 -> 5 -> 8 -> 9 -> 11

What do you want to do next ? 
Do you want to work on another file ? Enter 'yes' or 'no' : Enter file number please (1 to 12) : Chosen file : 8
This is table8

* Creating the scheduling graph:
There are 12 vertices.
And 18 edges.
0 -> 4 = 0
0 -> 5 = 0
0 -> 6 = 0
0 -> 7 = 0
0 -> 10 = 0
1 -> 9 = 1
2 -> 9 = 2
3 -> 9 = 3
4 -> 1 = 4
5 -> 1 = 5
5 -> 8 = 5
6 -> 3 = 6
7 -> 2 = 7
7 -> 8 = 7
8 -> 9 = 9
9 -> 11 = 9
10 -> 1 = 10
10 -> 3 = 10

Adjacent Matrix:
     0  1  2  3  4  5  6  7  8  9 10 11
  0  *  *  *  *  0  0  0  0  *  *  0  *
  1  *  *  *  *  *  *  *  *  *  1  *  *
  2  *  *  *  *  *  *  *  *  *  2  *  *
  3  *  *  *  *  *  *  *  *  *  3  *  *
  4  *  4  *  *  *  *  *  *  *  *  *  *
  5  *  5  *  *  *  *  *  *  5  *  *  *
  6  *  *  *  6  *  *  *  *  *  *  *  *
  7  *  *  7  *  *  *  *  *  7  *  *  *
  8  *  *  *  *  *  *  *  *  *  9  *  *
  9  *  *  *  *  *  *  *  *  *  *  *  9
 10  * 10  * 10  *  *  *  *  *  *  *  *
 11  *  *  *  *  *  *  *  *  *  *  *  *

Checking if there are cycles and negative edges...

[[4, 5, 6, 7, 10], [9], [9], [9], [1], [1, 8], [3], [2, 8], [9], [11], [1, 3], []]
Exit points: [11]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Exit points: [9]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5, 6, 7, 8, 10]
Exit points: [1, 2, 3, 8]
Eliminating exit points
Remaining vertices: [0, 4, 5, 6, 7, 10]
Exit points: [4, 5, 6, 7, 10]
Eliminating exit points
Remaining vertices: [0]
Exit points: [0]
Eliminating exit points
Remaining vertices: []
Exit points: None
Eliminating exit points
Remaining vertices: None
-> There is no cycle
The graph has no negative edges. 

Computing ranks and dates...

                       Ranks                           0                           1                           1                           1                           1                           1                           2                           2                           2                           2                           3                           4
            Vertex(Duration)                        0(0)                        4(4)                        5(5)                        6(6)                        7(7)                      10(10)                        1(1)                        2(2)                        3(3)                        8(9)                        9(9)                       11(0)
                Predecessors                          []                         [0]                         [0]                         [0]                         [0]                         [0]                  [4, 5, 10]                         [7]                     [6, 10]                      [5, 7]                [1, 2, 3, 8]                         [9]
      Dates per Predecessors                       [0_0]                       [0_0]                       [0_0]                       [0_0]                       [0_0]                       [0_0]           [4_4, 5_5, 10_10]                       [7_7]                [6_6, 10_10]                  [5_5, 7_7]     [11_1, 9_2, 13_3, 16_8]                      [25_9]
               Earliest Date                         0_0                         0_0                         0_0                         0_0                         0_0                         0_0                       10_10                         7_7                       10_10                         7_7                        16_8                        25_9
                  Successors            [4, 5, 6, 7, 10]                         [1]                      [1, 8]                         [3]                      [2, 8]                      [1, 3]                         [9]                         [9]                         [9]                         [9]                        [11]                          []
        Dates per Successors [11_4, 2_5, 7_6, 0_7, 3_10]                      [11_1]                 [10_1, 2_8]                       [7_3]                  [7_2, 0_8]                  [5_1, 3_3]                      [15_9]                      [14_9]                      [13_9]                       [7_9]                     [16_11]                     [25_11]
                 Latest Date                         0_7                        11_1                         2_8                         7_3                         0_8                         3_3                        15_9                        14_9                        13_9                         7_9                       16_11                       25_11
                 Total Float                           0                          11                           2                           7                           0                           3                           5                           7                           3                           0                           0                           0

Critical path(s) : 
0 -> 7 -> 8 -> 9 -> 11

What do you want to do next ? 
Do you want to work on another file ? Enter 'yes' or 'no' : Enter file number please (1 to 12) : Chosen file : 9
This is table9

* Creating the scheduling graph:
There are 12 vertices.
And 19 edges.
0 -> 4 = 0
0 -> 6 = 0
0 -> 7 = 0
0 -> 10 = 0
1 -> 9 = 1
2 -> 9 = 2
3 -> 9 = 3
4 -> 1 = 4
4 -> 5 = 4
5 -> 1 = 5
5 -> 8 = 5
6 -> 3 = 6
7 -> 2 = 7
7 -> 8 = 7
8 -> 1 = 8
8 -> 9 = 8
9 -> 11 = 9
10 -> 1 = 10
10 -> 3 = 10

Adjacent Matrix:
     0  1  2  3  4  5  6  7  8  9 10 11
  0  *  *  *  *  0  *  0  0  *  *  0  *
  1  *  *  *  *  *  *  *  *  *  1  *  *
  2  *  *  *  *  *  *  *  *  *  2  *  *
  3  *  *  *  *  *  *  *  *  *  3  *  *
  4  *  4  *  *  *  4  *  *  *  *  *  *
  5  *  5  *  *  *  *  *  *  5  *  *  *
  6  *  *  *  6  *  *  *  *  *  *  *  *
  7  *  *  7  *  *  *  *  *  7  *  *  *
  8  *  8  *  *  *  *  *  *  *  8  *  *
  9  *  *  *  *  *  *  *  *  *  *  *  9
 10  * 10  * 10  *  *  *  *  *  *  *  *
 11  *  *  *  *  *  *  *  *  *  *  *  *

Checking if there are cycles and negative edges...

[[4, 6, 7, 10], [9], [9], [9], [1, 5], [1, 8], [3], [2, 8], [1, 9], [11], [1, 3], []]
Exit points: [11]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Exit points: [9]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5, 6, 7, 8, 10]
Exit points: [1, 2, 3]
Eliminating exit points
Remaining vertices: [0, 4, 5, 6, 7, 8, 10]
Exit points: [6, 8, 10]
Eliminating exit points
Remaining vertices: [0, 4, 5, 7]
Exit points: [5, 7]
Eliminating exit points
Remaining vertices: [0, 4]
Exit points: [4]
Eliminating exit points
Remaining vertices: [0]
Exit points: [0]
Eliminating exit points
Remaining vertices: []
Exit points: None
Eliminating exit points
Remaining vertices: None
-> There is no cycle
The graph has no negative edges. 

Computing ranks and dates...

                   Ranks                       0                       1                       1                       1                       1                       2                       2                       2                       3                       4                       5                       6
        Vertex(Duration)                    0(0)                    4(4)                    6(6)                    7(7)                  10(10)                    2(2)                    3(3)                    5(5)                    8(8)                    1(1)                    9(9)                   11(0)
            Predecessors                      []                     [0]                     [0]                     [0]                     [0]                     [7]                 [6, 10]                     [4]                  [5, 7]           [4, 5, 8, 10]            [1, 2, 3, 8]                     [9]
  Dates per Predecessors                   [0_0]                   [0_0]                   [0_0]                   [0_0]                   [0_0]                   [7_7]            [6_6, 10_10]                   [4_4]              [9_5, 7_7] [4_4, 9_5, 17_8, 10_10] [18_1, 9_2, 13_3, 17_8]                  [27_9]
           Earliest Date                     0_0                     0_0                     0_0                     0_0                     0_0                     7_7                   10_10                     4_4                     9_5                    17_8                    18_1                    27_9
              Successors           [4, 6, 7, 10]                  [1, 5]                     [3]                  [2, 8]                  [1, 3]                     [9]                     [9]                  [1, 8]                  [1, 9]                     [9]                    [11]                      []
    Dates per Successors   [0_4, 9_6, 2_7, 5_10]             [13_1, 0_5]                   [9_3]              [9_2, 2_8]              [7_1, 5_3]                  [16_9]                  [15_9]             [12_1, 4_8]             [9_1, 10_9]                  [17_9]                 [18_11]                 [27_11]
             Latest Date                     0_4                     0_5                     9_3                     2_8                     5_3                    16_9                    15_9                     4_8                     9_1                    17_9                   18_11                   27_11
             Total Float                       0                       0                       9                       2                       5                       9                       5                       0                       0                       0                       0                       0

Critical path(s) : 
0 -> 4 -> 5 -> 8 -> 1 -> 9 -> 11

What do you want to do next ? 
Do you want to work on another file ? Enter 'yes' or 'no' : Enter file number please (1 to 12) : Chosen file : 10
This is table10

* Creating the scheduling graph:
There are 10 vertices.
And 16 edges.
0 -> 1 = 0
1 -> 2 = 2
1 -> 4 = 2
1 -> 5 = 2
2 -> 3 = 3
2 -> 4 = 3
2 -> 8 = 3
3 -> 7 = 5
4 -> 5 = 6
4 -> 6 = 6
4 -> 8 = 6
5 -> 6 = 2
5 -> 7 = 2
6 -> 9 = 1
7 -> 8 = 6
8 -> 9 = 1

Adjacent Matrix:
     0  1  2  3  4  5  6  7  8  9
  0  *  0  *  *  *  *  *  *  *  *
  1  *  *  2  *  2  2  *  *  *  *
  2  *  *  *  3  3  *  *  *  3  *
  3  *  *  *  *  *  *  *  5  *  *
  4  *  *  *  *  *  6  6  *  6  *
  5  *  *  *  *  *  *  2  2  *  *
  6  *  *  *  *  *  *  *  *  *  1
  7  *  *  *  *  *  *  *  *  6  *
  8  *  *  *  *  *  *  *  *  *  1
  9  *  *  *  *  *  *  *  *  *  *

Checking if there are cycles and negative edges...

[[1], [2, 4, 5], [3, 4, 8], [7], [5, 6, 8], [6, 7], [9], [8], [9], []]
Exit points: [9]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5, 6, 7, 8]
Exit points: [6, 8]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5, 7]
Exit points: [7]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5]
Exit points: [3, 5]
Eliminating exit points
Remaining vertices: [0, 1, 2, 4]
Exit points: [4]
Eliminating exit points
Remaining vertices: [0, 1, 2]
Exit points: [2]
Eliminating exit points
Remaining vertices: [0, 1]
Exit points: [1]
Eliminating exit points
Remaining vertices: [0]
Exit points: [0]
Eliminating exit points
Remaining vertices: []
Exit points: None
Eliminating exit points
Remaining vertices: None
-> There is no cycle
The graph has no negative edges. 

Computing ranks and dates...

                  Ranks                      0                      1                      2                      3                      3                      4                      5                      5                      6                      7
       Vertex(Duration)                   0(0)                   1(2)                   2(3)                   3(5)                   4(6)                   5(2)                   6(1)                   7(6)                   8(1)                   9(0)
           Predecessors                     []                    [0]                    [1]                    [2]                 [1, 2]                 [1, 4]                 [4, 5]                 [3, 5]              [2, 4, 7]                 [6, 8]
 Dates per Predecessors                  [0_0]                  [0_0]                  [2_1]                  [5_2]             [2_1, 5_2]            [2_1, 11_4]           [11_4, 13_5]           [10_3, 13_5]      [5_2, 11_4, 19_7]           [14_6, 20_8]
          Earliest Date                    0_0                    0_0                    2_1                    5_2                    5_2                   11_4                   13_5                   13_5                   19_7                   20_8
             Successors                    [1]              [2, 4, 5]              [3, 4, 8]                    [7]              [5, 6, 8]                 [6, 7]                    [9]                    [8]                    [9]                     []
   Dates per Successors                  [0_1]        [0_2, 3_4, 9_5]       [5_3, 2_4, 16_8]                  [8_7]      [5_5, 13_6, 13_8]           [17_6, 11_7]                 [19_9]                 [13_8]                 [19_9]                 [20_9]
            Latest Date                    0_1                    0_2                    2_4                    8_7                    5_5                   11_7                   19_9                   13_8                   19_9                   20_9
            Total Float                      0                      0                      0                      3                      0                      0                      6                      0                      0                      0

Critical path(s) : 
0 -> 1 -> 2 -> 4 -> 5 -> 7 -> 8 -> 9

What do you want to do next ? 
Do you want to work on another file ? Enter 'yes' or 'no' : Enter file number please (1 to 12) : Chosen file : 11
This is table11

* Creating the scheduling graph:
There are 10 vertices.
And 16 edges.
0 -> 1 = 0
1 -> 2 = 1
1 -> 4 = 1
1 -> 5 = 1
2 -> 3 = 1
2 -> 8 = 1
3 -> 7 = 4
4 -> 2 = 2
4 -> 6 = 2
4 -> 8 = 2
5 -> 4 = 5
5 -> 6 = 5
5 -> 7 = 5
6 -> 8 = 6
7 -> 8 = 3
8 -> 9 = 0

Adjacent Matrix:
     0  1  2  3  4  5  6  7  8  9
  0  *  0  *  *  *  *  *  *  *  *
  1  *  *  1  *  1  1  *  *  *  *
  2  *  *  *  1  *  *  *  *  1  *
  3  *  *  *  *  *  *  *  4  *  *
  4  *  *  2  *  *  *  2  *  2  *
  5  *  *  *  *  5  *  5  5  *  *
  6  *  *  *  *  *  *  *  *  6  *
  7  *  *  *  *  *  *  *  *  3  *
  8  *  *  *  *  *  *  *  *  *  0
  9  *  *  *  *  *  *  *  *  *  *

Checking if there are cycles and negative edges...

[[1], [2, 4, 5], [3, 8], [7], [2, 6, 8], [4, 6, 7], [8], [8], [9], []]
Exit points: [9]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5, 6, 7, 8]
Exit points: [8]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5, 6, 7]
Exit points: [6, 7]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5]
Exit points: [3]
Eliminating exit points
Remaining vertices: [0, 1, 2, 4, 5]
Exit points: [2]
Eliminating exit points
Remaining vertices: [0, 1, 4, 5]
Exit points: [4]
Eliminating exit points
Remaining vertices: [0, 1, 5]
Exit points: [5]
Eliminating exit points
Remaining vertices: [0, 1]
Exit points: [1]
Eliminating exit points
Remaining vertices: [0]
Exit points: [0]
Eliminating exit points
Remaining vertices: []
Exit points: None
Eliminating exit points
Remaining vertices: None
-> There is no cycle
The graph has no negative edges. 

Computing ranks and dates...

                  Ranks                      0                      1                      2                      3                      4                      4                      5                      6                      7                      8
       Vertex(Duration)                   0(0)                   1(1)                   5(5)                   4(2)                   2(1)                   6(6)                   3(4)                   7(3)                   8(0)                   9(0)
           Predecessors                     []                    [0]                    [1]                 [1, 5]                 [1, 4]                 [4, 5]                    [2]                 [3, 5]           [2, 4, 6, 7]                    [8]
 Dates per Predecessors                  [0_0]                  [0_0]                  [1_1]             [1_1, 6_5]             [1_1, 8_4]             [8_4, 6_5]                  [9_2]            [13_3, 6_5] [9_2, 8_4, 14_6, 16_7]                 [16_8]
          Earliest Date                    0_0                    0_0                    1_1                    6_5                    8_4                    8_4                    9_2                   13_3                   16_7                   16_8
             Successors                    [1]              [2, 4, 5]              [4, 6, 7]              [2, 6, 8]                 [3, 8]                    [8]                    [7]                    [8]                    [9]                     []
   Dates per Successors                  [0_1]        [7_2, 5_4, 0_5]        [1_4, 5_6, 8_7]       [6_2, 8_6, 14_8]            [8_3, 15_8]                 [10_8]                  [9_7]                 [13_8]                 [16_9]                 [16_9]
            Latest Date                    0_1                    0_5                    1_4                    6_2                    8_3                   10_8                    9_7                   13_8                   16_9                   16_9
            Total Float                      0                      0                      0                      0                      0                      2                      0                      0                      0                      0

Critical path(s) : 
0 -> 1 -> 5 -> 4 -> 2 -> 3 -> 7 -> 8 -> 9

What do you want to do next ? 
Do you want to work on another file ? Enter 'yes' or 'no' : Enter file number please (1 to 12) : Chosen file : 12
This is table12

* Creating the scheduling graph:
There are 14 vertices.
And 23 edges.
0 -> 1 = 0
0 -> 2 = 0
1 -> 3 = 10
1 -> 4 = 10
1 -> 12 = 10
2 -> 3 = 10
2 -> 4 = 10
3 -> 9 = 9
4 -> 5 = 5
4 -> 7 = 5
4 -> 9 = 5
5 -> 6 = 4
5 -> 8 = 4
6 -> 11 = 2
6 -> 12 = 2
7 -> 8 = 2
8 -> 11 = 4
9 -> 8 = 8
9 -> 10 = 8
10 -> 3 = 12
10 -> 11 = 12
11 -> 13 = 2
12 -> 13 = 20

Adjacent Matrix:
     0  1  2  3  4  5  6  7  8  9 10 11 12 13
  0  *  0  0  *  *  *  *  *  *  *  *  *  *  *
  1  *  *  * 10 10  *  *  *  *  *  *  * 10  *
  2  *  *  * 10 10  *  *  *  *  *  *  *  *  *
  3  *  *  *  *  *  *  *  *  *  9  *  *  *  *
  4  *  *  *  *  *  5  *  5  *  5  *  *  *  *
  5  *  *  *  *  *  *  4  *  4  *  *  *  *  *
  6  *  *  *  *  *  *  *  *  *  *  *  2  2  *
  7  *  *  *  *  *  *  *  *  2  *  *  *  *  *
  8  *  *  *  *  *  *  *  *  *  *  *  4  *  *
  9  *  *  *  *  *  *  *  *  8  *  8  *  *  *
 10  *  *  * 12  *  *  *  *  *  *  * 12  *  *
 11  *  *  *  *  *  *  *  *  *  *  *  *  *  2
 12  *  *  *  *  *  *  *  *  *  *  *  *  * 20
 13  *  *  *  *  *  *  *  *  *  *  *  *  *  *

Checking if there are cycles and negative edges...

[[1, 2], [3, 4, 12], [3, 4], [9], [5, 7, 9], [6, 8], [11, 12], [8], [11], [8, 10], [3, 11], [13], [13], []]
Exit points: [13]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
Exit points: [11, 12]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Exit points: [6, 8]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 5, 7, 9, 10]
Exit points: [5, 7]
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 9, 10]
Exit points: []
Eliminating exit points
Remaining vertices: [0, 1, 2, 3, 4, 9, 10]
-> There is a cycle
This is a cyclic graph, so we won't proceed further. 

What do you want to do next ? 
Do you want to work on another file ? Enter 'yes' or 'no' : Exiting...
